#!/usr/bin/python3.10

import os
import subprocess
import json
import boto.s3.key
import re

with open('./tooling/release.json', 'r') as fp:
    conf = json.load(fp)

with open('./package.json', 'r') as fp:
    version = "".join(c for c in json.load(fp)['version'] if c in '0123456789.')
    version_with_dashes = version.replace('.', '-')

def s3upload(local_path, remote_path):
    with open(local_path, 'rb') as fp:
        s3conn = boto.connect_s3(conf['aws']['id'], conf['aws']['secret'])
        bucket = s3conn.get_bucket(conf['aws']['bucket'])
        fp.seek(0, os.SEEK_END)
        size = fp.tell()
        k = boto.s3.key.Key(bucket)
        k.key = remote_path
        fp.seek(0)
        sent = k.set_contents_from_file(fp)
        if sent != size:
            raise Exception('File did not upload successfully')

# chrome enterprise upload

print("Uploading " + conf['chrome-enterprise']['path']['upload'] % version_with_dashes)
s3upload(conf['chrome-enterprise']['path']['saved'] % version_with_dashes, conf['chrome-enterprise']['path']['upload'] % version_with_dashes)
hash_chrome = subprocess.check_output(
    ['sha256sum', conf['chrome-enterprise']['path']['saved'] % version_with_dashes]).decode().split('  ')[0]
enterprise_download_link = "%s%s/%s" % (conf['aws']['base_url'], conf['aws']['bucket'], 
    conf['chrome-enterprise']['path']['upload'] % version_with_dashes)
print(f"Enterprise release {version}:\n{enterprise_download_link}\nsha256sum: {hash_chrome}")

# firefox consumer upload

path_packed = conf['firefox']['path']['packed'] % version
path_signed = conf['firefox']['path']['signed'] % version
path_saved = conf['firefox']['path']['saved'] % version_with_dashes

os.rename(path_signed, path_saved)
os.unlink(path_packed)

input(f"Place AMO-signed file at {path_signed} (don't rename file if downloaded), then hit enter")

print("Uploading " + conf['firefox']['path']['upload'] % version)
s3upload(path_saved, conf['firefox']['path']['upload'] % version)

with open('json_data.json', 'w') as outfile:
    json.dump({
      "addons": {
        "firefox@cryptup.io": {
          "updates": [
            {
              "version": version,
              "update_link": f"{conf['aws']['base_url']}{conf['aws']['bucket']}/{conf['firefox']['path']['upload'] % version}",
              "update_hash": f"sha256:{subprocess.check_output(['sha256sum', path_saved]).decode().split('  ')[0]}",
              "applications": {
                "gecko": {
                  "strict_min_version": "60.0"
                }
              }
            }
          ]
        }
      }
    }, outfile)

# update the web

with open('./../flowcrypt-script/browser/release.json') as f:
    ff_path = json.load(f)["firefox"]["path"]["upload"]

with open('./package.json', 'r') as fp:
    manifest = json.load(fp)
    new_v = ''.join(c for c in manifest['version'] if c in '0123456789.')

for filepath in ['./../flowcrypt-web/source/html/index.htm', './../flowcrypt-web/source/blog/page/download.markdown']:
    with open(filepath, 'r') as rp:
        replaced = re.sub(ff_path % r'\d\.\d\.\d', ff_path % new_v, rp.read())
    with open(filepath, 'w') as wp:
        wp.write(replaced)

os.system('cd ../flowcrypt-web && git commit -a --message=\'firefox v%s links updated\' && cd ../flowcrypt-browser' % new_v)
